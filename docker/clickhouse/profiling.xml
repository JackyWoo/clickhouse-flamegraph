<yandex>
    <skip_check_for_incorrect_settings>1</skip_check_for_incorrect_settings>
    <!-- fill system.trace_log for 10 times per second for CPU time -->
    <global_profiler_cpu_time_period_ns>100000000</global_profiler_cpu_time_period_ns>
    <!-- fill system.trace_log for 1 times per second for Real time, it produces too much data now -->
    <global_profiler_real_time_period_ns>1000000000</global_profiler_real_time_period_ns>

    <!-- Simple server-wide memory profiler. Collect a stack trace at every peak allocation step (in bytes).
         Data will be stored in system.trace_log table with query_id = empty string.
         Zero means disabled. Minimal effective value is 4 MiB.
         Data will dump with 'Memory' trace_type
      -->
    <total_memory_profiler_step>4194304</total_memory_profiler_step>
    <!-- Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type.
            The probability is for every alloc/free regardless to the size of the allocation.
            Note that sampling happens only when the amount of untracked memory exceeds the untracked memory limit,
             which is 4 MiB by default but can be lowered if 'total_memory_profiler_step' is lowered.
            You may want to set 'total_memory_profiler_step' to 1 for extra fine grained sampling.
         -->
    <total_memory_tracker_sample_probability>0.01</total_memory_tracker_sample_probability>

    <profiles>
        <default>
            <log_queries>1</log_queries>
            <allow_introspection_functions>1</allow_introspection_functions>
            <!-- 25 times per second sampling profiler -->
            <query_profiler_real_time_period_ns>40000000</query_profiler_real_time_period_ns>
            <query_profiler_cpu_time_period_ns>40000000</query_profiler_cpu_time_period_ns>

            <!-- memory profiling for each query, dump stack trace when 1MiB allocation with query_id not empty
            Whenever query memory usage becomes larger than every next step in number of bytes the memory profiler
            will collect the allocating stack trace.
            Zero means disabled memory profiler.
            Values lower than a few megabytes will slow down query processing.
            -->
            <memory_profiler_step>1048576</memory_profiler_step>
            <!-- Small allocations and deallocations are grouped in thread local variable and tracked or profiled only
                when amount (in absolute value) becomes larger than specified value.
                If the value is higher than 'memory_profiler_step' it will be effectively lowered to 'memory_profiler_step'.
            -->
            <max_untracked_memory>1048576</max_untracked_memory>
            <!-- Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type.
                 The probability is for every alloc/free regardless to the size of the allocation.
                 Note that sampling happens only when the amount of untracked memory exceeds 'max_untracked_memory'.
                 You may want to set 'max_untracked_memory' to 0 for extra fine grained sampling. -->
            <memory_profiler_sample_probability>1</memory_profiler_sample_probability>

        </default>
    </profiles>
</yandex>
